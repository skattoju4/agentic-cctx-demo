name: Ingestion Services CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-py:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-py:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up Helm
      run: |
        chmod +x scripts/get_helm.sh
        ./scripts/get_helm.sh
    - name: Lint Helm chart
      run: |
        helm lint deploy/ingestion-service-py/helm
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push the Docker image
      run: |
        docker build ./ingestion-service-py --file ./ingestion-service-py/Dockerfile --tag ghcr.io/${{ github.repository }}/ingestion-service-py:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}/ingestion-service-py:${{ github.sha }}

  build-ts:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up Helm
      run: |
        chmod +x scripts/get_helm.sh
        ./scripts/get_helm.sh
    - name: Lint Helm chart
      run: |
        helm lint deploy/ingestion-service-ts/helm
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push the Docker image
      run: |
          docker build . --file ./ingestion-service-ts/Dockerfile --tag ghcr.io/${{ github.repository }}/ingestion-service-ts:${{ github.sha }}
        docker push ghcr.io/${{ github.repository }}/ingestion-service-ts:${{ github.sha }}

  test-py:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ingestion-service-py/requirements.txt
    - name: Run tests
      run: python -m pytest ingestion-service-py/test_main.py

  test-ts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install dependencies
      run: npm ci
      working-directory: ./ingestion-service-ts
    - name: Run tests
      run: npm test
      working-directory: ./ingestion-service-ts

  e2e-test:
    runs-on: ubuntu-latest
    needs: [build-py, build-ts]
    env:
      KAFKA_RELEASE_NAME: kafka
    steps:
    - uses: actions/checkout@v3
    - name: Set up KinD cluster
      uses: helm/kind-action@v1.2.0
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests kafka-python
    - name: Set up Helm
      run: |
        chmod +x scripts/get_helm.sh
        ./scripts/get_helm.sh
    - name: Update Kafka Helm chart dependencies
      run: |
        helm dependency update deploy/kafka
    - name: Lint Kafka Helm chart
      run: |
        helm lint deploy/kafka
    - name: Deploy Kafka
      run: |
        echo "Giving the cluster some time to initialize..."
        sleep 30
        echo "Deploying Kafka..."
        helm install ${{ env.KAFKA_RELEASE_NAME }} ./deploy/kafka -n default
        echo "Waiting for Strimzi operator to be ready..."
        kubectl wait --for=condition=ready pod -l strimzi.io/kind=cluster-operator -n default --timeout=300s
        echo "Strimzi operator is ready."
        echo "Getting logs from Strimzi operator..."
        kubectl logs -l strimzi.io/kind=cluster-operator -n default --tail=500
        echo "Waiting for Kafka cluster to be ready..."
        kubectl wait --for=condition=Ready kafka/${{ env.KAFKA_RELEASE_NAME }}-kafka --timeout=300s
        echo "Kafka is ready."
    - name: Deploy Ingestion Service - Python
      run: |
        echo "Deploying Ingestion Service - Python..."
        helm install ingestion-py ./deploy/ingestion-service-py/helm -n default \
          --set kafka.host=kafka-kafka-kafka-bootstrap \
          --set kafka.port=9092 \
          --set image.repository=ghcr.io/${{ github.repository }}/ingestion-service-py \
          --set image.tag=${{ github.sha }}
        echo "Waiting for Ingestion Service to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ingestion-service-py -n default --timeout=300s
        echo "Ingestion Service is ready."
    - name: Get Ingestion Service logs on failure
      if: failure()
      run: |
        echo "Capturing logs from Ingestion Service pod..."
        kubectl logs -l app.kubernetes.io/name=ingestion-service-py -n default --tail=500
    - name: Verify Deployments
      run: |
        echo "Verifying deployments..."
        kubectl get all -n default
        kubectl describe pods -n default
    - name: Run E2E Test - Python
      run: |
        echo "Creating e2e test runner pod..."
        kubectl run e2e-test-runner --image=python:3.10-slim -- sleep 3600
        echo "Waiting for test runner pod to be ready..."
        kubectl wait --for=condition=ready pod e2e-test-runner --timeout=300s
        echo "Installing test dependencies in the pod..."
        kubectl exec e2e-test-runner -- pip install requests kafka-python
        echo "Copying scripts to the pod..."
        kubectl cp ./scripts e2e-test-runner:/scripts
        echo "Running e2e test for python..."
        kubectl exec e2e-test-runner -- \
          env INGESTION_SERVICE_HOST=ingestion-py-ingestion-service-py \
              INGESTION_SERVICE_PORT=80 \
              KAFKA_HOST=kafka-kafka-kafka-bootstrap \
              KAFKA_PORT=9092 \
          python /scripts/e2e_test.py
    - name: Uninstall Ingestion Service - Python
      run: |
        echo "Uninstalling Ingestion Service - Python..."
        helm uninstall ingestion-py -n default
    - name: Deploy Ingestion Service - TypeScript
      run: |
        echo "Deploying Ingestion Service - TypeScript..."
        KAFKA_IP=$(kubectl get svc kafka-kafka-kafka-bootstrap -n default -o jsonpath='{.spec.clusterIP}')
        helm install ingestion-ts ./deploy/ingestion-service-ts/helm -n default \
          --set kafka.host=$KAFKA_IP \
          --set kafka.port=9092 \
          --set image.repository=ghcr.io/${{ github.repository }}/ingestion-service-ts \
          --set image.tag=${{ github.sha }}
        echo "Waiting for Ingestion Service to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ingestion-service-ts -n default --timeout=300s
        echo "Ingestion Service is ready."
    - name: Verify Deployments
      run: |
        echo "Verifying deployments..."
        kubectl get all -n default
        kubectl describe pods -n default
    - name: Run E2E Test - TypeScript
      run: |
        echo "Running e2e test for typescript..."
        kubectl exec e2e-test-runner -- \
          env INGESTION_SERVICE_HOST=ingestion-ts-ingestion-service-ts \
              INGESTION_SERVICE_PORT=3000 \
              KAFKA_HOST=kafka-kafka-kafka-bootstrap \
              KAFKA_PORT=9092 \
          python /scripts/e2e_test.py
    - name: Get Ingestion Service logs on failure - TypeScript
      if: failure()
      run: |
        echo "Capturing logs from Ingestion Service pod..."
        kubectl logs -l app.kubernetes.io/name=ingestion-service-ts -n default --tail=500
    - name: Get Kafka logs on failure
      if: failure()
      run: |
        echo "Capturing logs from Kafka pod..."
        kubectl logs kafka-kafka-dual-role-0 -n default --tail=500
